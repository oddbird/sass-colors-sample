@use '../utils/is';
@use '../utils/list';
@use '../utils/math';
@use '../utils/string';
@use '../utils/throw';

@use 'sass:meta';

@function color(
  $input,
  $expected,
  $includes-space: false
) {
  $components: null;
  $space: null;
  $channels: null;
  $alpha: null;

  @if is.special-variable($input) { @return null; }

  $input-type: meta.type-of($input);

  @if $input-type == 'list'
  and (
    list.is-bracketed($input)
    or not list.index(('space', 'slash'), list.separator($input))
  ) {
    @return throw.error(
      'Input must be an unbracketed list, with space or slash separators',
      'build color'
    );
  }

  @if $input-type == 'list'
  and list.separator($input) == 'slash' {
    @if list.length($input) != 2 {
      @return throw.error(
        'Slash-separated input should only include channels & alpha values',
        'build color'
      );
    }

    $components: list.nth($input, 1);
    $alpha: list.nth($input, 2);
  } @else {
    $components: list.slice($input, 1, -1);
    $last: list.nth($input, -1);

    // missing logic to test if string is un-quoted
    @if meta.type-of($last) == 'string'
    and string.index($last, '/') {
      $split-last: string.split($last, '/');

      @if list.length($split-last) != 2 {
        @return throw.error(
          'Unable to parse final value of input',
          'build color'
        );
      }

      @for $i from 1 through 2 {
        $item: list.nth($split-last, $i);
        $split-last: list.set-nth(
          $split-last, $i, string.to-number($item) or $item
        );
      }

      $components: list.append($components, list.nth($split-last, 1));
      $alpha: list.nth($split-last, 2);

      // missing logic for 'two slash-separated numbers'
    } @else {
      $components: list.append($components, $last);
    }
  }

  // validate channels
  @if (not $components) or ($components == ()) {
    @return throw.error(
      'No channel values were defined',
      'build color'
    );
  }

  @if is.special-variable($components) {
    $channels: $components;
  } @else {
    @if meta.type-of($components) != 'list'
    or list.is-bracketed($components)
    or list.separator($components) != 'space' {
      @return throw.error(
        'Channels must be an unbracketed, space-separated list',
        'build color'
      );
    }

    @if $includes-space {
      $space: list.nth($components, 1);
      $channels: list.slice($components, 2);

      @if not (meta.type-of($space) == 'string') {
        @return throw.error(
          'Color space must be a string',
          'build color'
        );
      }
    } @else {
      $channels: $components;
    }

    @if list.length($channels) > $expected {
      @return throw.error(
        'Max channel count is #{$expected}, but #{list.length($channels)} channels were given',
        'build color'
      );
    }

    @each $channel in $channels {
      @if meta.type-of($channel) != 'number'
      and not (is.none($channel) or is.special-number($channel)) {
        @return throw.error(
          'Channel values should be numbers, css variables, or the keyword none',
          'build color'
        );
      }
    }
  }

  // validate alpha
  @if not $alpha {
    $alpha: 1;
  } @else if not is.special-number($alpha) {
    @if meta.type-of($alpha) == 'number' {
      $alpha: math.percent-convert($alpha, 1);
    } @else if not is.none($alpha) {
      @return throw.error(
        'Alpha value must be a number or the keyword none',
        'build color'
      );
    }
  }

  // handle special values
  @if is.special-number($alpha) { @return null; }
  @if is.special-variable($space) { @return null; }

  // also catches a single custom prop for all $channels
  @each $channel in $channels {
    @if is.special-number($channel) { @return null; }
  }

  // require exact channel-count
  @if list.length($channels) != $expected {
    @return throw.error(
      'Expected #{$expected} channels, but found #{list.length($channels)}',
      'build color'
    );
  }

  // return the result
  $components: if($includes-space and $space, $space $channels, $channels);
  @return list.slash($components, $alpha);
}
