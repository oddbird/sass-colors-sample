@forward 'sass:math';

@use 'sass:list';
@use 'sass:map';
@use 'sass:math';
@use 'sass:meta';

@function to-number($value) {
  @if meta.type-of($value) == 'number' {
    @return $value;
  } @else if meta.type-of($value) != 'string' {
    @error 'Value for `to-number` should be a number or a string.';
  }

  $numbers: (
    '0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9
  );
  $units: (
    'cm': 1cm, 'mm': 1mm, 'Q': 1Q, 'in': 1in, 'pc': 1pc, 'pt': 1pt, 'px': 1px,
    'em': 1em, 'ex': 1ex, 'ch': 1ch, 'rem': 1rem, 'cap': 1cap, 'ic': 1ic,
    'lh': 1lh, 'rlh': 1rlh,
    'vw': 1vw, 'vmin': 1vmin, 'vmax': 1vmax, 'vb': 1vb, 'vi': 1vi,
    'svw': 1svw, 'svh': 1svh, 'lvw': 1lvw, 'lvh': 1lvh, 'dvw': 1dvw, 'dvh': 1dvh,
    'cqh': 1cqh, 'cqw': 1cqw, 'cqb': 1cqb, 'cqi': 1cqi,
    'cqmin': 1cqmin, 'cqmax': 1cqmax,
    '%': 1%, 'fr': 1fr,
    'deg': 1deg, 'turn': 1turn, 'grad': 1grad, 'rad': 1rad,
    's': 1s, 'ms': 1ms,
    'Hz': 1Hz, 'kHz': 1kHz,
    'dpi': 1dpi, 'dpcm': 1dpcm, 'dppx': 1dppx, 'x': 1x,
  );

  $result: null;
  $digits: 0;
  $minus: string.slice($value, 1, 1) == '-';

  @for $i from if($minus, 2, 1) through string.length($value) {
    $character: string.slice($value, $i, $i);

    @if not (list.index(map.keys($numbers), $character) or $character == '.') {
      $remainder: string.slice($value, $i);
      $unit: map.get($units, $remainder);

      // if we have a number and a unit, put them together
      @if $unit and $result != null {
        $result: $result * $unit;
        @return if($minus, -$result, $result);
      }

      // otherwise, return null for a failed conversion
      @return null;
    }

    @if $character == '.' {
      $digits: 1;
    } @else if $digits == 0 {
      $result: ($result or 0) * 10 + map.get($numbers, $character);
    } @else {
      $digits: $digits * 10;
      $result: ($result or 0) + math.div(map.get($numbers, $character), $digits);
    }
  }

  @return if($minus, -$result, $result);
}

@function percent-convert($number, $max) {
  $unit: math.unit($number);

  @if $unit != '' and $unit != '%' {
    @error 'Can only percent-convert percentages';
  }

  @if $unit == '%' {
    $number: math.div($number * $max, 100%);
  }

  @return math.clamp(0, $number, $max);
}

@function to-deg($hue) {
  @if not math.compatible($hue, 1deg) {
    @error 'Cannot convert #{$hue} to degrees';
  }

  @return 0deg + $hue;
}

@function zero-none($value) {
  @return if($value == 'none', 0, $value);
}
