@forward 'sass:string';

@use 'throw';
@use 'math';
@use 'sass:string';
@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';

@function split($string, $separator, $limit: null) {
  @if meta.type-of($string) != 'string' {
    @return throw.error(
      '$string is not a string',
      'string split'
    );
  }
  @if meta.type-of($separator) != 'string' {
    @return throw.error(
      '$separator is not a string',
      'string split'
    );
  }
  @if meta.type-of($limit) == 'number' {
    @if $limit < 0 or $limit != math.round($limit) {
      @return throw.error(
        '$limit must be a positive intiger or null',
        'string split'
      );
    }
  } @else if $limit != null {
    @return throw.error(
      '$limit must be a positive intiger or null',
      'string split'
    );
  }
  @if $string == '' {
    @return list.append((), $string);
  }

  $split-list: ();

  @if $limit == 0 {
    @return $split-list;
  }

  $length: string.length($string);
  $limit: if($limit == null, $length, $limit);
  $split-counter: 0;

  @while $split-counter <= $limit and $length > 0 {
    @if $split-counter == $limit {
      $split-list: list.append($split-list, $string);
      $string: '';
    } @else if $separator == '' {
      $code-point: string.slice($string, 1, 1);
      $split-list: list.append($split-list, $code-point);
      $string: string.slice($string, 2);
      $split-counter: $split-counter + 1;
    } @else {
      $index: string.index($string, $separator);
      // current logic clearly makes sense if the index is > 1,
      // but returns an empty first item if the index is 1.
      // Is that the desired behavior?
      @if $index {
        $current-substring: string.slice($string, 1, $index - 1);
        $split-list: list.append($split-list, $current-substring);
        $string: string.slice($string, $index + string.length($separator));
        $split-counter: $split-counter + 1;
      } @else {
        // What happens if the index is null
        // (separator is not present in string)?
        // return the string
        $split-list: list.append($split-list, $string);
        $string: '';
      }
    }

    // we need to update the length before we repeat the loop
    $length: string.length($string);
  }
  @return $split-list;
}

@function to-number($string, $throw: false) {
  @if meta.type-of($string) == 'number' {
    @return $string;
  } @else if meta.type-of($string) != 'string' {
    @return throw.error(
      'Value for `to-number` should be a number or a string.',
      'string to-number'
    );
  }

  $numbers: (
    '0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9
  );
  $units: (
    'cm': 1cm, 'mm': 1mm, 'Q': 1Q, 'in': 1in, 'pc': 1pc, 'pt': 1pt, 'px': 1px,
    'em': 1em, 'ex': 1ex, 'ch': 1ch, 'rem': 1rem, 'cap': 1cap, 'ic': 1ic,
    'lh': 1lh, 'rlh': 1rlh,
    'vw': 1vw, 'vmin': 1vmin, 'vmax': 1vmax, 'vb': 1vb, 'vi': 1vi,
    'svw': 1svw, 'svh': 1svh, 'lvw': 1lvw, 'lvh': 1lvh, 'dvw': 1dvw, 'dvh': 1dvh,
    'cqh': 1cqh, 'cqw': 1cqw, 'cqb': 1cqb, 'cqi': 1cqi,
    'cqmin': 1cqmin, 'cqmax': 1cqmax,
    '%': 1%, 'fr': 1fr,
    'deg': 1deg, 'turn': 1turn, 'grad': 1grad, 'rad': 1rad,
    's': 1s, 'ms': 1ms,
    'Hz': 1Hz, 'kHz': 1kHz,
    'dpi': 1dpi, 'dpcm': 1dpcm, 'dppx': 1dppx, 'x': 1x,
  );

  $result: null;
  $digits: 0;
  $minus: string.slice($string, 1, 1) == '-';

  @for $i from if($minus, 2, 1) through string.length($string) {
    $character: string.slice($string, $i, $i);

    @if not (list.index(map.keys($numbers), $character) or $character == '.') {
      $remainder: string.slice($string, $i);
      $unit: map.get($units, $remainder);

      // if we have a number and a unit, put them together
      @if $unit and $result != null {
        $result: $result * $unit;
        @return if($minus, -$result, $result);
      }

      // otherwise, return null/error for a failed conversion
      @if $throw {
        @return throw.error(
          'Failed to convert "#{$string}" to a number',
          'to-number'
        );
      } @else {
        @return null;
      }
    }

    @if $character == '.' {
      $digits: 1;
    } @else if $digits == 0 {
      $result: ($result or 0) * 10 + map.get($numbers, $character);
    } @else {
      $digits: $digits * 10;
      $result: ($result or 0) + math.div(map.get($numbers, $character), $digits);
    }
  }

  @return if($minus, -$result, $result);
}
